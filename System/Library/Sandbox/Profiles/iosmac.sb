;;;;;; Base profile for iosmac sandboxing
;;;;;;
;;;;;; Copyright (c) 2011-2018 Apple Inc.  All Rights reserved.
;;;;;;
;;;;;; WARNING: The sandbox rules in this file currently constitute
;;;;;; Apple System Private Interface and are subject to change at any time and
;;;;;; without notice. The contents of this file are also auto-generated and
;;;;;; not user editable; it may be overwritten at any time.
(version 1)
(deny default)
(unless (defined? '*entitlements*) (define *entitlements* '()))
(define (entitlement key)
  (let ((entry (assoc key *entitlements*))) (if entry (cdr entry))))
(define (%string-prefix? pattern str)
  (let loop ((i 0))
    (cond ((>= i (string-length pattern)) #t)
          ((>= i (string-length str)) #f)
          ((char=? (string-ref pattern i) (string-ref str i)) (loop (+ i 1)))
          (else #f))))
(define (sandbox-array-entitlement name fun)
  (let ((ls (entitlement name)))
    (cond ((list? ls) (for-each (lambda (x) (if (string? x) (fun x))) ls))
          ((string? ls) (fun ls)))))
(define (apply-read-and-issue-extension op path-filter)
  (op file-read* path-filter)
  (op file-issue-extension
      (require-all
        (extension-class "com.apple.app-sandbox.read")
        path-filter)))
(define (apply-write-and-issue-extension op path-filter)
  (op file-write* path-filter)
  (op file-issue-extension
      (require-all
        (extension-class "com.apple.app-sandbox.read-write")
        path-filter)))
(define (read-only-and-issue-extensions path-filter)
  (apply-read-and-issue-extension allow path-filter))
(define (read-write-and-issue-extensions path-filter)
  (apply-read-and-issue-extension allow path-filter)
  (apply-write-and-issue-extension allow path-filter))
(define (allow-read-directory-contents path)
  (if path (apply-read-and-issue-extension allow (subpath path))))
(define (allow-read-write-directory-contents path)
  (if path
    (begin
      (apply-read-and-issue-extension allow (subpath path))
      (apply-write-and-issue-extension
        allow
        (regex (string-append "^" (regex-quote path) "/")))
      (allow file-write-create
             file-write-data
             (require-all (vnode-type DIRECTORY) (literal path))))))
(define (end-with-slash? s) (eqv? (string-ref s (- (string-length s) 1)) #\/))
(define (strip-last-char s) (substring s 0 (- (string-length s) 1)))
(define (HEX-pattern-match-generator pattern-descriptor)
  (letrec ((pattern-string ""))
    (for-each
      (lambda (repeat-count)
        (if (zero? repeat-count)
          (set! pattern-string (string-append pattern-string "-"))
          (let appender ((count repeat-count))
            (if (> count 0)
              (begin
                (set! pattern-string (string-append pattern-string "[0-9A-F]"))
                (appender (- count 1)))))))
      pattern-descriptor)
    pattern-string))
(define (uuid-HEX-pattern-match-string)
  (HEX-pattern-match-generator '(8 0 4 0 4 0 4 0 12)))
(define *uuid-pattern* "")
(define (uuid-regex-string)
  (if (zero? (string-length *uuid-pattern*))
    (set! *uuid-pattern* (uuid-HEX-pattern-match-string)))
  *uuid-pattern*)
(define resolving-literal literal)
(define resolving-subpath subpath)
(define resolving-prefix prefix)
(define resolving-regex regex)
(define (protect-redirected-paths))
(define (protect-redirectable-paths))
(let* ((*path-aliases*
         (or (entitlement "com.apple.private.app-sandbox.redirected-paths")
             '()))
       (*redirectable-paths*
         (or (entitlement "com.apple.private.app-sandbox.redirectable-paths")
             '()))
       (path-ancestor?
         (lambda (short long)
           (cond ((< (string-length long) (string-length short)) #f)
                 ((string=? short long) #t)
                 ((%string-prefix? short long)
                  (or (end-with-slash? short)
                      (char=? #\/ (string-ref long (string-length short)))))
                 (else #f))))
       (path-list-ancestor?
         (lambda (shortlist long)
           (member
             #t
             (map (lambda (short) (path-ancestor? short long)) shortlist))))
       (path-alias-resolve
         (lambda (path)
           (let loop ((mapping *path-aliases*))
             (if (null? mapping)
               path
               (let ((key (caar mapping)) (realpath (cadar mapping)))
                 (if (path-ancestor? key path)
                   (string-append
                     realpath
                     (substring path (string-length key)))
                   (loop (cdr mapping))))))))
       (path-ancestor-regex?
         (lambda (short long)
           (cond ((< (string-length long) (string-length short)) #f)
                 ((string=? short long) #f)
                 ((%string-prefix? short long)
                  (let ((c (string-ref long (string-length short))))
                    (or (char=? c #\/) (char=? c #\$))))
                 (else #f))))
       (path-alias-resolve-regex
         (lambda (path-regex)
           (let loop ((mapping *path-aliases*))
             (if (null? mapping)
               path-regex
               (let ((key (string-append "^" (regex-quote (caar mapping))))
                     (realpath
                       (string-append "^" (regex-quote (cadar mapping)))))
                 (if (path-ancestor-regex? key path-regex)
                   (string-append
                     realpath
                     (substring path-regex (string-length key)))
                   (loop (cdr mapping))))))))
       (subpath-aliases
         (lambda (path)
           (let ((x (list path)))
             (for-each
               (lambda (mapping)
                 (if (and (not (string=? path (car mapping)))
                          (path-ancestor? path (car mapping)))
                   (set! x (append x (car mapping)))))
               *path-aliases*)
             x)))
       (prefix-aliases
         (lambda (path)
           (let ((x (list path)))
             (for-each
               (lambda (mapping)
                 (if (and (not (string=? path (car mapping)))
                          (%string-prefix? path (car mapping)))
                   (set! x (append x (car mapping)))))
               *path-aliases*)
             x)))
       (flatten
         (lambda (l accum)
           (cond ((null? l) accum)
                 ((atom? l) (cons l accum))
                 (else (flatten (car l) (flatten (cdr l) accum))))))
       (orig-regex regex)
       (orig-literal literal)
       (orig-subpath subpath)
       (orig-prefix prefix)
       (%resolving-literal
         (lambda paths (apply orig-literal (map path-alias-resolve paths))))
       (%resolving-subpath
         (lambda paths
           (apply orig-subpath
                  (map path-alias-resolve
                       (flatten (map subpath-aliases paths) '())))))
       (%resolving-prefix
         (lambda prefixes
           (apply orig-prefix
                  (map path-alias-resolve
                       (flatten (map prefix-aliases prefixes) '())))))
       (%resolving-regex
         (lambda patterns
           (apply orig-regex (map path-alias-resolve-regex patterns))))
       (remove-trailing-slash
         (lambda (path) (if (end-with-slash? (strip-last-char path) path))))
       (ensure-trailing-slash
         (lambda (path)
           (if (end-with-slash? path) path (string-append path "/"))))
       (force-list
         (lambda (ls) (cond ((list? ls) ls) ((string? ls) (list ls)))))
       (find-all-pos-of-char
         (lambda (str char pos)
           (cond ((>= pos (string-length str)) '())
                 ((char=? char (string-ref str pos))
                  (cons pos (find-all-pos-of-char str char (+ pos 1))))
                 (else (find-all-pos-of-char str char (+ pos 1))))))
       (dirhierarchy-list
         (lambda (short long)
           (map (lambda (pos)
                  (cond ((= pos 0) "/") (else (substring long 0 pos))))
                (find-all-pos-of-char
                  (ensure-trailing-slash long)
                  #\/
                  (- (string-length short) 1)))))
       (parentdirs-list (lambda (path) (dirhierarchy-list "/" path)))
       (dangerous-paths
         (append
           *redirectable-paths*
           (map cadr *path-aliases*)
           (force-list
             (entitlement
               "com.apple.security.exception.files.absolute-path.read-write"))
           (map (lambda (relpath) (string-append (param "_HOME") relpath))
                (force-list
                  (entitlement
                    "com.apple.security.exception.files.home-relative-path.read-write")))))
       (protect
         (lambda (path)
           (deny file-write-create
                 (require-all (orig-literal path) (vnode-type SYMLINK)))))
       (protect-ancestors-of-path
         (lambda (path)
           (when (not (null? dangerous-paths))
                 (for-each
                   (lambda (dir)
                     (if (path-list-ancestor? dangerous-paths dir)
                       (protect dir)))
                   (parentdirs-list path)))))
       (%protect-redirected-paths
         (lambda ()
           (for-each
             (lambda (mapping)
               (let ((symlink-path (car mapping)) (target-path (cadr mapping)))
                 (allow file-read-metadata (orig-literal symlink-path))
                 (protect-ancestors-of-path symlink-path)
                 (protect-ancestors-of-path target-path)))
             *path-aliases*)))
       (%protect-redirectable-paths
         (lambda ()
           (for-each
             (lambda (path) (protect-ancestors-of-path path))
             *redirectable-paths*))))
  (if *path-aliases*
    (begin
      (set! resolving-literal %resolving-literal)
      (set! resolving-subpath %resolving-subpath)
      (set! resolving-prefix %resolving-prefix)
      (set! resolving-regex %resolving-regex)
      (set! protect-redirected-paths %protect-redirected-paths)))
  (if *redirectable-paths*
    (set! protect-redirectable-paths %protect-redirectable-paths)))
(macro (with-transparent-redirection rules)
       `(let ((literal resolving-literal)
              (subpath resolving-subpath)
              (prefix resolving-prefix)
              (regex resolving-regex))
          ,@rules))
(define (home-regex home-relative-regex)
  (resolving-regex
    (string-append "^" (regex-quote (param "_HOME")) home-relative-regex)))
(define regex-home home-regex)
(define (home-subpath home-relative-subpath)
  (resolving-subpath (string-append (param "_HOME") home-relative-subpath)))
(define (home-prefix home-relative-subpath)
  (resolving-prefix (string-append (param "_HOME") home-relative-subpath)))
(define (home-literal home-relative-literal)
  (resolving-literal (string-append (param "_HOME") home-relative-literal)))
(define (home-path-ancestors home-relative-path)
  (with-transparent-redirection
    (path-ancestors (string-append (param "_HOME") home-relative-path))))
(define (container-regex container-relative-regex)
  (resolving-regex
    (string-append
      "^"
      (regex-quote (param "application_container"))
      container-relative-regex)))
(define (container-subpath container-relative-subpath)
  (resolving-subpath
    (string-append
      (param "application_container")
      container-relative-subpath)))
(define (container-literal container-relative-literal)
  (resolving-literal
    (string-append
      (param "application_container")
      container-relative-literal)))
(import "system.sb")
(allow system-audit system-sched mach-task-name lsopen)
(deny process-info*)
(allow process-info-pidinfo)
(allow process-info-pidfdinfo (target self))
(allow process-info-pidfileportinfo (target self))
(allow process-info-setcontrol (target self))
(allow process-info-dirtycontrol (target self))
(allow process-info-rusage (target self))
(allow process-codesigning-status* (target self))
(deny nvram*)
(allow nvram-get
       (nvram-variable "4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM")
       (nvram-variable "4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB"))
(deny file-link (home-subpath "/Library"))
(with-filter
  (extension "com.apple.app-sandbox.read-write")
  (allow file-link (home-subpath "/Library/Mobile Documents")))
(allow file-read* (subpath "/Library"))
(deny file-read*
      (subpath "/Library/Application Support/AppStoreContent")
      (subpath "/Library/Application Support/AppStore")
      (subpath "/Library/Caches")
      (subpath "/Library/Logs")
      (subpath "/Library/Managed Preferences")
      (subpath "/Library/Preferences"))
(allow file-read* (subpath "/Library/Preferences/Logging"))
(when (param "application_bundle")
      (allow-read-directory-contents (param "application_bundle")))
(allow-read-write-directory-contents (param "application_darwin_user_dir"))
(let ((tmpdir (param "application_darwin_temp_dir")))
  (apply-read-and-issue-extension allow (subpath tmpdir))
  (apply-write-and-issue-extension allow (subpath tmpdir))
  (allow file-write-create
         file-write-data
         (require-all (vnode-type DIRECTORY) (literal tmpdir))))
(allow file-mount
       file-unmount
       (subpath (param "application_darwin_user_dir"))
       (subpath (param "application_darwin_temp_dir")))
(allow-read-write-directory-contents (param "application_darwin_cache_dir"))
(allow file-mount
       file-unmount
       (subpath (param "application_darwin_cache_dir")))
(allow file-issue-extension
       (require-all
         (extension-class "com.apple.nsurlstorage.extension-cache")
         (subpath (param "application_darwin_cache_dir"))))
(when (param "application_dyld_paths")
      (allow file-read*
             (apply subpath
                    (split-string (param "application_dyld_paths") ":"))))
(let ((container-root (param "application_container")))
  (allow-read-write-directory-contents container-root)
  (allow file-chroot
         file-ioctl
         file-link
         file-mknod
         file-revoke
         file-search
         file-mount
         file-unmount
         (subpath container-root)))
(deny file-write-create
      (require-all
        (vnode-type SYMLINK)
        (require-any
          (container-literal "/Library")
          (container-subpath "/Library/Preferences")
          (container-subpath "/Library/SyncedPreferences"))))
(define (%protect-preference-symlink domain)
  (deny file-unlink
        (container-literal
          (string-append "/Library/Preferences/" domain ".plist"))
        (container-regex
          (string-append
            "/Library/Preferences/ByHost/"
            (regex-quote domain)
            "\\..*\\.plist$"))))
(define (shared-preferences-read . domains)
  (for-each
    (lambda (domain) (allow user-preference-read (preference-domain domain)))
    domains))
(define (shared-preferences-read-write . domains)
  (for-each
    (lambda (domain)
      (allow user-preference-read
             user-preference-write
             (preference-domain domain)))
    domains))
(allow file-read*
       file-ioctl
       (require-all
         (regex "^/dev/r?disk[0-9]+")
         (require-any
           (device-conforms-to "IOBDMedia")
           (device-conforms-to "IODVDMedia")
           (device-conforms-to "IOCDMedia"))))
(allow network-outbound (remote ip))
(allow mach-lookup
       (global-name "com.apple.airportd")
       (global-name "com.apple.cfnetwork.AuthBrokerAgent")
       (global-name "com.apple.cfnetwork.cfnetworkagent")
       (global-name "com.apple.nesessionmanager")
       (global-name "com.apple.nsurlsessiond")
       (global-name "com.apple.NetworkDiagnostic.agent")
       (global-name "com.apple.WebKit.PluginAgent"))
(allow network-inbound (local ip))
(system-network)
(allow iokit-open
       (iokit-user-client-class "IOUSBDeviceUserClientV2")
       (iokit-user-client-class "IOUSBInterfaceUserClientV2"))
(allow device-camera)
(when (or (entitlement "com.apple.security.device.microphone")
          (entitlement "com.apple.security.device.audio-input"))
      (allow device-microphone))
(allow mach-lookup
       (global-name "com.apple.CoreLocation.agent")
       (global-name "com.apple.locationd.desktop.spi")
       (global-name "com.apple.locationd.desktop.synchronous")
       (global-name "com.apple.locationd.desktop.registration"))
(allow distributed-notification-post)
(with-filter
  (extension "com.apple.tcc.kTCCServiceAddressBook")
  (allow mach-lookup
         (global-name "com.apple.AddressBook.abd")
         (global-name
           "com.apple.AddressBook.AddressBookApplicationFrameworkIPC")
         (global-name "com.apple.AddressBook.AssistantService")
         (global-name "com.apple.AddressBook.ContactsAccountsService")
         (global-name "com.apple.AddressBook.SourceSync")
         (global-name "com.apple.ContactsAgent.addressbook"))
  (shared-preferences-read-write "com.apple.AddressBook")
  (allow file-read*
         file-write*
         (home-subpath "/Library/Application Support/AddressBook"))
  (allow-read-write-directory-contents
    (param "application_addressbook_lock_dir"))
  (read-write-and-issue-extensions (home-subpath "/Library/Images/People"))
  (read-only-and-issue-extensions
    (require-any
      (subpath "/Library/Images/People")
      (subpath "/System/Library/Images/People")
      (subpath "/Network/Library/Images/People"))))
(deny file-link
      (subpath "/Library/Images/People")
      (subpath "/System/Library/Images/People")
      (subpath "/Network/Library/Images/People"))
(allow file-read* file-write* (home-subpath "/Library/Calendars"))
(deny file-read*
      file-write*
      (home-literal "/Library/Calendars/Calendar Cache")
      (home-literal "/Library/Calendars/Calendar Cache-journal")
      (home-literal "/Library/Calendars/Calendar Cache-shm")
      (home-literal "/Library/Calendars/Calendar Cache-wal")
      (home-literal "/Library/Calendars/.Calendar Cache-conch"))
(read-write-and-issue-extensions
  (require-any
    (home-subpath "/Library/Calendars/Attachments")
    (home-regex "/Library/Calendars/[0-9A-Z-]+\\.[^/]+/Attachments(/|$)")
    (home-subpath "/Library/Calendars/Temporary Files")))
(allow-read-write-directory-contents (param "application_calendars_lock_dir"))
(allow mach-lookup
       (global-name-regex "^com\\.apple\\.CalendarStore\\.lock\\.")
       (global-name "com.apple.accountsd.accountmanager")
       (global-name "com.apple.CalendarAgent")
       (global-name "com.apple.CalendarAgent.database")
       (global-name "com.apple.CalendarAgent.proxy")
       (global-name "com.apple.CalendarAgent.store"))
(when (or (entitlement "com.apple.private.logging.diagnostic")
          (entitlement "com.apple.diagnosticd.diagnostic"))
      (allow mach-lookup (global-name "com.apple.logd.admin")))
(define (ubiquity-filter s)
  (let ((s (list->string
             (let loop ((orig (string->list s)) (ls '()))
               (if (null? orig)
                 (reverse ls)
                 (loop (cdr orig)
                       (let ((ch (car orig)))
                         (cons (if (char=? #\. ch) #\~ ch) ls))))))))
    (let ((path (string-append "/Library/Mobile Documents/" s)))
      (let ((n (string-length path)))
        (if (and (char=? #\* (string-ref path (- n 1)))
                 (char=? #\~ (string-ref path (- n 2))))
          (let ((sub (substring path 0 (- n 2))))
            (home-regex (string-append (regex-quote sub) ".*")))
          (home-subpath path))))))
(sandbox-array-entitlement
  "com.apple.developer.ubiquity-container-identifiers"
  (lambda (id)
    (allow file-link (ubiquity-filter id))
    (read-write-and-issue-extensions (ubiquity-filter id))))
(sandbox-array-entitlement
  "com.apple.developer.icloud-container-identifiers"
  (lambda (id)
    (allow file-link (ubiquity-filter id))
    (read-write-and-issue-extensions (ubiquity-filter id))))
(with-filter
  (extension "com.apple.librarian.ubiquity-container")
  (allow file-link (home-subpath "/Library/Mobile Documents"))
  (read-write-and-issue-extensions (home-subpath "/Library/Mobile Documents")))
(allow mach-lookup
       (global-name "com.apple.gamed")
       (global-name "com.apple.gamed.osx")
       (global-name "com.apple.gamed.xpc"))
(shared-preferences-read "com.apple.gamekit")
(when (or (entitlement "com.apple.diagnosticd.diagnostic")
          (entitlement "com.apple.private.logging.diagnostic"))
      (with-filter
        (extension "com.apple.logd.read-only")
        (allow file-read*
               (subpath "/private/var/db/diagnostics")
               (subpath "/private/var/db/uuidtext"))))
(allow authorization-right-obtain
       (right-name "system.print.operator")
       (right-name "system.printingmanager"))
(allow mach-lookup
       (global-name "com.apple.printuitool.agent")
       (global-name "com.apple.printtool.agent")
       (global-name "com.apple.printtool.daemon"))
(allow file-read*
       (home-literal "/.cups/lpoptions")
       (home-literal "/.cups/client.conf")
       (literal "/private/etc/cups/client.conf")
       (literal "/private/etc/cups/lpoptions")
       (subpath "/private/etc/cups/ppd")
       (literal "/private/var/run/cupsd"))
(shared-preferences-read "org.cups.PrintingPrefs")
(allow qtn-user (extension "com.apple.app-sandbox.read-write"))
(sandbox-array-entitlement
  "com.apple.security.application-groups"
  (lambda (suite)
    (let* ((group-container-root
             (string-append "/Library/Group Containers/" suite))
           (group-container-literal
             (lambda (container-relative-literal)
               (home-literal
                 (string-append
                   group-container-root
                   container-relative-literal))))
           (group-container-subpath
             (lambda (container-relative-subpath)
               (home-subpath
                 (string-append
                   group-container-root
                   container-relative-subpath))))
           (group-container-regex
             (lambda (container-relative-regex)
               (home-regex
                 (string-append
                   (regex-quote group-container-root)
                   container-relative-regex)))))
      (allow file-read-data (home-literal group-container-root))
      (allow file-chroot
             file-ioctl
             file-link
             file-mknod
             file-revoke
             file-search
             file-mount
             file-unmount
             network-bind
             network-outbound
             (group-container-regex "/"))
      (read-write-and-issue-extensions (group-container-regex "/"))
      (allow file-read*
             (subpath
               (string-append
                 "/Library/Application Support/AppStore/GroupContent/"
                 suite)))
      (deny file-write-create
            (require-all
              (require-not (vnode-type DIRECTORY))
              (group-container-literal "/Library")))
      (allow mach-lookup
             mach-register
             (global-name-regex
               (string-append "^" (regex-quote (string-append suite ".")))))
      (allow ipc-posix*
             (ipc-posix-name-regex
               (string-append "^" (regex-quote (string-append suite "/"))))))))
(read-only-and-issue-extensions (extension "com.apple.app-sandbox.read"))
(read-write-and-issue-extensions
  (extension "com.apple.app-sandbox.read-write"))
(allow mach-lookup (extension "com.apple.app-sandbox.mach"))
(allow iokit-open (extension "com.apple.app-sandbox.iokit-client"))
(allow file-read*
       file-write*
       (require-all
         (require-not (vnode-type SYMLINK))
         (require-any
           (home-subpath "/Library/Colors")
           (home-subpath "/Library/FontCollections")
           (home-subpath "/Library/Spelling"))))
(allow mach-lookup
       (global-name "com.apple.cfprefsd.daemon")
       (global-name "com.apple.cfprefsd.agent")
       (local-name "com.apple.cfprefsd.agent"))
(read-only-and-issue-extensions
  (require-all (file-mode 4) (require-any (subpath "/System"))))
(allow file-read*
       (home-literal "/.CFUserTextEncoding")
       (home-subpath "/Library/Audio")
       (home-subpath "/Library/ColorPickers")
       (home-subpath "/Library/Compositions")
       (home-subpath "/Library/Filters")
       (home-subpath "/Library/Fonts")
       (home-subpath "/Library/Input Methods")
       (home-subpath "/Library/KeyBindings")
       (home-subpath "/Library/Keyboard Layouts")
       (home-subpath "/Library/PDF Services")
       (home-literal "/Library/Preferences/com.apple.DownloadAssessment.plist")
       (home-subpath "/Library/QuickLook")
       (home-subpath "/Library/Sounds"))
(deny file-map-executable (home-subpath "/Library/ColorPickers"))
(shared-preferences-read
  ".GlobalPreferences"
  "com.apple.AdLib"
  "com.apple.AppleMultitouchTrackpad"
  "com.apple.airplay"
  "com.apple.avfoundation"
  "com.apple.cmio"
  "com.apple.coreanimation"
  "com.apple.coremedia"
  "com.apple.coremediaio.support"
  "com.apple.corevideo"
  "com.apple.DictionaryServices"
  "com.apple.driver.AppleBluetoothMultitouch.mouse"
  "com.apple.driver.AppleBluetoothMultitouch.trackpad"
  "com.apple.driver.AppleHIDMouse"
  "com.apple.HIToolbox"
  "com.apple.inputmethodkit"
  "com.apple.LaunchServices"
  "com.apple.lookup.shared"
  "com.apple.MultitouchSupport"
  "com.apple.security_common"
  "com.apple.security"
  "com.apple.ServicesMenu.Services"
  "com.apple.speech.synthesis.general.prefs"
  "com.apple.speech.voice.prefs"
  "com.apple.systemsound"
  "com.apple.TelephonyUtilities"
  "com.apple.universalaccess"
  "pbs")
(shared-preferences-read-write "com.apple.AppKit.TextFavorites")
(allow file-read*
       (home-literal "/Library/Preferences/com.apple.security_common.plist")
       (home-literal "/Library/Preferences/com.apple.security.plist"))
(%protect-preference-symlink "com.apple.security_common")
(%protect-preference-symlink "com.apple.security")
(allow user-preference-read (preference-domain "kCFPreferencesAnyApplication"))
(shared-preferences-read "com.apple.mediaaccessibility")
(shared-preferences-read-write
  "com.apple.preferences.extensions.ServicesWithUI"
  "com.apple.preferences.extensions.ShareMenu")
(shared-preferences-read "com.apple.Accessibility" "com.apple.AdLib")
(when (param "application_bundle_id")
      (allow file-read*
             (literal
               (string-append
                 "/Library/Managed Preferences/"
                 (param "application_bundle_id")
                 ".plist"))
             (literal
               (string-append
                 "/Library/Managed Preferences/"
                 (param "_USER")
                 "/"
                 (param "application_bundle_id")
                 ".plist"))
             (literal
               (string-append
                 "/Library/Preferences/"
                 (param "application_bundle_id")
                 ".plist"))
             (subpath
               (string-append
                 "/Library/Application Support/AppStore/Content/"
                 (param "application_bundle_id")))
             (home-regex
               (string-append
                 "/Library/Preferences/"
                 (regex-quote (param "application_bundle_id"))
                 "\\.([^\\.]+\\.)?LSSharedFileList\\.plist$")))
      (allow mach-register
             (global-name (param "application_bundle_id"))
             (global-name
               (string-append
                 (param "application_bundle_id")
                 ".ServiceProvider"))))
(allow file-read-metadata)
(allow file-read*
       (literal "/Library/Caches/com.apple.DiagnosticReporting.Networks.plist")
       (subpath "/Library/PDF Services")
       (literal "/Library/Preferences/.GlobalPreferences.plist")
       (literal "/Library/Preferences/com.apple.AppleShareClient.plist")
       (literal "/Library/Preferences/com.apple.HIToolbox.plist")
       (literal "/Library/Preferences/com.apple.loginwindow.plist")
       (regex "^/Library/Preferences/com\\.apple\\.security")
       (subpath "/Library/Preferences/Logging/Subsystems")
       (prefix "/Library/Preferences/com.apple.PowerManagement.")
       (literal "/Library/Preferences/SystemConfiguration/preferences.plist")
       (subpath "/Users/Shared/SC Info")
       (literal "/Volumes")
       (literal "/private/etc/group")
       (literal "/private/etc/hosts")
       (literal "/private/etc/openldap/ldap.conf")
       (literal "/private/etc/passwd")
       (literal "/private/etc/protocols")
       (literal "/private/etc/resolv.conf")
       (literal "/private/etc/services")
       (literal "/private/etc/ssl/cert.pem")
       (literal "/private/etc/ssl/openssl.cnf")
       (literal "/private/var/run/resolv.conf"))
(allow file-read*
       (subpath
         (string-append
           "/Library/Application Support/AppStoreContent/"
           (param "application_container_id")))
       (require-all (file-mode 4) (subpath "/Applications")))
(allow file-issue-extension
       (require-all
         (extension-class "com.apple.app-sandbox.read")
         (file-mode 4)
         (subpath "/Applications")))
(allow mach-lookup (global-name "com.apple.ocspd"))
(allow file-read* file-write* (home-prefix "/Library/Keychains/"))
(deny file-read*
      file-write*
      (home-regex
        (string-append "/Library/Keychains/" (uuid-regex-string) "(/|$)")))
(allow file-read*
       (subpath "/private/var/db/mds")
       (literal "/private/var/db/DetachedSignatures"))
(allow ipc-posix-shm-read*
       ipc-posix-shm-write-data
       (ipc-posix-name "com.apple.AppleDatabaseChanged"))
(allow mach-lookup
       (local-name "com.apple.CFPasteboardClient")
       (local-name "com.apple.coredrag")
       (global-name "com.apple.apsd")
       (global-name "com.apple.audio.AudioComponentPrefs")
       (global-name "com.apple.audio.AudioComponentRegistrar")
       (global-name "com.apple.audio.audiohald")
       (global-name "com.apple.audio.coreaudiod")
       (global-name "com.apple.backupd.sandbox.xpc")
       (global-name "com.apple.bird")
       (global-name "com.apple.bird.token")
       (global-name "com.apple.cache_delete.public")
       (global-name "com.apple.colorsyncd")
       (global-name "com.apple.colorsync.useragent")
       (global-name "com.apple.controlcenter.toggle")
       (global-name "com.apple.coremedia.endpoint.xpc")
       (global-name "com.apple.coremedia.endpointpicker.xpc")
       (global-name "com.apple.coremedia.endpointplaybacksession.xpc")
       (global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
       (global-name "com.apple.coremedia.endpointstream.xpc")
       (global-name "com.apple.coremedia.routediscoverer.xpc")
       (global-name "com.apple.coremedia.routingcontext.xpc")
       (global-name "com.apple.coremedia.volumecontroller.xpc")
       (global-name "com.apple.coreservices.appleevents")
       (global-name "com.apple.CoreServices.coreservicesd")
       (global-name "com.apple.coreservices.launcherror-handler")
       (global-name "com.apple.coreservices.quarantine-resolver")
       (global-name "com.apple.coreservices.sharedfilelistd.async-mig")
       (global-name "com.apple.coreservices.sharedfilelistd.mig")
       (global-name "com.apple.coreservices.sharedfilelistd.xpc")
       (global-name "com.apple.cvmsServ")
       (global-name "com.apple.DiskArbitration.diskarbitrationd")
       (global-name "com.apple.distributed_notifications@1v3")
       (global-name "com.apple.distributed_notifications@Uv3")
       (global-name "com.apple.dock.fullscreen")
       (global-name "com.apple.dock.server")
       (global-name "com.apple.FileCoordination")
       (global-name "com.apple.FileProvider")
       (global-name "com.apple.FontObjectsServer")
       (global-name "com.apple.FontRegistry.FontRegistryUIAgent")
       (global-name "com.apple.fonts")
       (global-name "com.apple.FSEvents")
       (global-name "com.apple.helpd")
       (global-name "com.apple.icdd")
       (global-name "com.apple.iconservices")
       (global-name "com.apple.iconservices.store")
       (global-name "com.apple.iiod")
       (global-name "com.apple.ImageCaptureExtension2.presence")
       (global-name "com.apple.ink.private")
       (global-name "com.apple.inputmethodkit.getxpcendpoint")
       (global-name "com.apple.inputmethodkit.launchagent")
       (global-name "com.apple.inputmethodkit.launcher")
       (global-name "com.apple.inputmethodkit.setxpcendpoint")
       (global-name "com.apple.iohideventsystem")
       (global-name "com.apple.KerberosHelper.LKDCHelper")
       (global-name "com.apple.KeyboardServices.TextReplacementService")
       (global-name "com.apple.lookupd")
       (global-name "com.apple.ls.boxd")
       (global-name "com.apple.lsd.mapdb")
       (global-name "com.apple.lsd.modifydb")
       (global-name "com.apple.lsd.open")
       (global-name "com.apple.lsd.openurl")
       (global-name "com.apple.mediaremoted.xpc")
       (global-name "com.apple.metadata.mds")
       (global-name "com.apple.midiserver")
       (global-name "com.apple.midiserver.io")
       (global-name "com.apple.netauth.user.auth")
       (global-name "com.apple.pasteboard.1")
       (global-name "com.apple.pbs.fetch_services")
       (global-name "com.apple.pluginkit.pkd")
       (global-name "com.apple.ProgressReporting")
       (global-name "com.apple.quicklook")
       (global-name "com.apple.quicklook.config")
       (global-name "com.apple.quicklook.ThumbnailsAgent")
       (global-name "com.apple.quicklook.ui.helper")
       (global-name "com.apple.quicklook.ui.helper.active")
       (global-name "com.apple.revisiond")
       (global-name "com.apple.rtcreportingd")
       (global-name "com.apple.security.pboxd")
       (global-name "com.apple.securityd.xpc")
       (global-name "com.apple.SecurityServer")
       (global-name "com.apple.sharingd.nsxpc")
       (global-name "com.apple.SleepServices")
       (global-name "com.apple.speech.recognitionserver")
       (global-name "com.apple.speech.synthesis.console")
       (global-name "com.apple.speechArbitrationServer")
       (global-name "com.apple.spindump")
       (global-name "com.apple.storeagent.storekit")
       (global-name "com.apple.storeagent.storekit.receiptrenewal")
       (global-name "com.apple.syncdefaultsd")
       (global-name "com.apple.system.DirectoryService.membership_v1")
       (global-name "com.apple.system.opendirectoryd.api")
       (global-name "com.apple.SystemConfiguration.configd")
       (global-name "com.apple.SystemConfiguration.DNSConfiguration")
       (global-name "com.apple.SystemConfiguration.NetworkInformation")
       (global-name "com.apple.systemstats.analysis")
       (global-name "com.apple.tailspind")
       (global-name "com.apple.tccd")
       (global-name "com.apple.tccd.system")
       (global-name
         "com.apple.telephonyutilities.callservicesdaemon.callcapabilities")
       (global-name "com.apple.TrustEvaluationAgent")
       (global-name "com.apple.tsm.uiserver")
       (global-name "com.apple.UNCUserNotification")
       (global-name "com.apple.usernotifications.usernotificationservice")
       (global-name "com.apple.VoiceOver.running")
       (global-name "com.apple.window_proxies")
       (global-name "com.apple.windowserver.active")
       (global-name "com.apple.WorkflowServiceRunner")
       (global-name "com.apple.xpc.loginitemregisterd")
       (global-name "com.apple.xpc.smd")
       (global-name-regex "_OpenStep$"))
(allow mach-lookup
       (global-name "com.apple.analyticsd")
       (global-name "com.apple.assertiond.processassertionconnection")
       (global-name "com.apple.cookied")
       (global-name "com.apple.nsurlstorage-cache")
       (global-name "com.apple.usymptomsd"))
(allow mach-lookup
       (global-name "com.apple.awdd")
       (global-name "com.apple.corerecents.recentsd")
       (global-name "com.apple.frontboard.systemappservices")
       (global-name "com.apple.homed.xpc")
       (global-name "com.apple.itunesstored.xpc"))
(allow mach-lookup
       (global-name "com.apple.CARenderServer")
       (global-name "com.apple.assertiond.processinfoservice")
       (global-name "com.apple.frontboard.systemappservices")
       (global-name "com.apple.frontboard.workspace")
       (global-name "com.apple.iphone.axserver-systemwide")
       (global-name "com.apple.remote-text-editing")
       (global-name "com.apple.remote-text-editing-legacy")
       (global-name "com.apple.sharing.remote-text-editing")
       (global-name "com.apple.powerlog.plxpclogger.xpc"))
(allow mach-lookup (global-name "PurplePPTServer"))
(allow mach-lookup
       (global-name "com.apple.iosmac.remote-text-editing")
       (global-name "com.apple.logind")
       (global-name "com.apple.rapport.remote-text-input")
       (global-name "com.apple.statskit"))
(allow mach-register
       (global-name
         (string-append (param "application_container_id") ".gsEvents")))
(allow file-read-data
       (literal "/Library/Preferences/com.apple.ViewBridge.plist"))
(allow mach-lookup
       (global-name "com.apple.PowerManagement.control")
       (global-name "com.apple.iokit.powerdxpc"))
(allow iokit-open (iokit-user-client-class "RootDomainUserClient"))
(with-filter
  (iokit-registry-entry-class "IODisplayWrangler")
  (allow iokit-set-properties (iokit-property "IORequestIdle")))
(allow iokit-open (iokit-user-client-class "IOHIDParamUserClient"))
(system-graphics)
(with-filter
  (iokit-registry-entry-class "IOHIDEventDriver")
  (allow iokit-set-properties (iokit-property "CapsLockDelayOverride")))
(allow appleevent-send
       (appleevent-destination "com.apple.imagecaptureextension2"))
(allow network-outbound (subpath "/private/var/run"))
(deny network-outbound (literal "/private/var/run/usbmuxd"))
(allow network-bind
       network-outbound
       (resolving-subpath (param "application_container")))
(deny network-outbound (literal "/private/var/run/cupsd"))
(deny network-outbound (remote ip "localhost:631"))
(deny file-write-xattr (xattr "com.apple.quarantine") (with no-log))
(deny file-read-xattr
      file-write-xattr
      (xattr-regex "^com\\.apple\\.security\\.private\\."))
(allow mach-lookup
       (global-name "com.apple.notificationcenterui.widgetcontent")
       (global-name "com.apple.usernoted.client")
       (global-name "com.apple.usernoted.daemon_client")
       (global-name "com.apple.usernoted.push"))
(allow network* (extension "com.apple.OpenGLProfiler"))
(allow file-read*
       file-write*
       (mount-relative-regex "^/\\.Trashes(/|$)")
       (home-subpath "/.Trash"))
(when (or (entitlement "com.apple.security.device.microphone")
          (entitlement "com.apple.security.device.audio-input"))
      (allow iokit-open
             (require-all
               (iokit-connection "AppleHDAEngineInput")
               (iokit-user-client-class
                 "IOAudioControlUserClient"
                 "IOAudioEngineUserClient"))))
(allow iokit-open
       (require-all
         (iokit-connection "AppleHDAEngineOutput")
         (iokit-user-client-class
           "IOAudioControlUserClient"
           "IOAudioEngineUserClient")))
(allow iokit-open
       (iokit-user-client-class "AppleUpstreamUserClient")
       (iokit-user-client-class "AudioAUUC"))
(read-write-and-issue-extensions
  (mount-relative-regex "^/\\.TemporaryItems(/|$)"))
(allow authorization-right-obtain (right-name "com.apple.trust-settings.user"))
(allow file-read* (home-subpath "/Library/Caches/GeoServices"))
(shared-preferences-read "com.apple.GEO")
(allow system-fsctl
       (fsctl-command (_IO "h" 24))
       (fsctl-command (_IO "h" 32))
       (fsctl-command (_IO "h" 47))
       (fsctl-command (_IO "z" 12))
       (fsctl-command (_IO "z" 19))
       (fsctl-command (_IO "z" 23)))
(allow ipc-posix-shm-read*
       ipc-posix-shm-write-data
       (ipc-posix-name-regex "^CFPBS:"))
(allow ipc-posix-shm-read*
       ipc-posix-shm-write-data
       (ipc-posix-name-regex "^AudioIO"))
(allow ipc-posix-shm*
       (ipc-posix-name "com.apple.ColorSync.Gen.lock")
       (ipc-posix-name "com.apple.ColorSync.Disp.lock")
       (ipc-posix-name "com.apple.ColorSync.Gray2.2")
       (ipc-posix-name "com.apple.ColorSync.sRGB")
       (ipc-posix-name "com.apple.ColorSync.GenGray")
       (ipc-posix-name "com.apple.ColorSync.GenRGB")
       (ipc-posix-name-regex "^com\\.apple\\.cs\\."))
(allow file-read*
       (subpath "/Library/ColorSync/Profiles")
       (home-subpath "/Library/ColorSync"))
(allow authorization-right-obtain
       (right-name "system.colorsync.install.profile"))
(allow ipc-posix-shm-read*
       (ipc-posix-name "apple.shm.notification_center")
       (ipc-posix-name-regex "^/tmp/com\\.apple\\.csseed\\.")
       (ipc-posix-name-regex "^ls\\."))
(allow ipc-posix-shm-read*
       ipc-posix-shm-write-data
       ipc-posix-shm-write-unlink
       (ipc-posix-name-regex "^gdt-[A-Za-z0-9]+-(c|s)$"))
(allow ipc-posix-shm-read*
       ipc-posix-shm-write-data
       (ipc-posix-name-regex "^Apple MIDI (in|out) [0-9]+$"))
(allow file-read* (subpath "/private/var/db/datadetectors/sys"))
(allow mach-lookup (global-name "com.apple.DataDetectorsSourceAccess"))
(shared-preferences-read "com.apple.MobileAsset")
(allow mach-lookup
       (global-name "com.apple.mobileassetd")
       (global-name "com.apple.mobileassetd.v2"))
(with-filter
  (extension "com.apple.assets.read")
  (allow file-read*
         (subpath "/System/Library/Assets")
         (subpath "/Library/Assets")
         (home-subpath "/Library/Assets")))
(allow file-read*
       (home-subpath "/Library/Dictionaries")
       (subpath "/Library/Dictionaries")
       (subpath "/Network/Library/Dictionaries"))
(sandbox-array-entitlement
  "com.apple.security.exception.iokit-user-client-class"
  (lambda (name)
    (allow iokit-open (iokit-user-client-class name))
    (allow iokit-set-properties (iokit-user-client-class name))))
(sandbox-array-entitlement
  "com.apple.security.exception.mach-lookup.global-name"
  (lambda (name) (allow mach-lookup (global-name name))))
(sandbox-array-entitlement
  "com.apple.security.exception.mach-lookup.local-name"
  (lambda (name) (allow mach-lookup (local-name name))))
(sandbox-array-entitlement
  "com.apple.security.exception.mach-register.global-name"
  (lambda (name) (allow mach-register (global-name name))))
(sandbox-array-entitlement
  "com.apple.security.exception.mach-register.local-name"
  (lambda (name) (allow mach-register (local-name name))))
(define (safe-subpath path) (subpath (if (string=? path "") "/" path)))
(define (select-filter path with-slash without-slash)
  (if (end-with-slash? path)
    (with-slash (strip-last-char path))
    (without-slash path)))
(sandbox-array-entitlement
  "com.apple.security.exception.files.home-relative-path.read-only"
  (lambda (path)
    (let ((filter (select-filter path home-subpath home-literal)))
      (read-only-and-issue-extensions filter)
      (allow filter))))
(sandbox-array-entitlement
  "com.apple.security.exception.files.home-relative-path.read-write"
  (lambda (path)
    (let ((filter (select-filter path home-subpath home-literal)))
      (allow file-link filter)
      (read-write-and-issue-extensions filter))))
(sandbox-array-entitlement
  "com.apple.security.exception.files.absolute-path.read-only"
  (lambda (path)
    (let ((filter (select-filter path safe-subpath literal)))
      (read-only-and-issue-extensions filter))))
(sandbox-array-entitlement
  "com.apple.security.exception.files.absolute-path.read-write"
  (lambda (path)
    (let ((filter (select-filter path safe-subpath literal)))
      (allow file-link filter)
      (read-write-and-issue-extensions filter))))
(sandbox-array-entitlement
  "com.apple.security.exception.shared-preference.read-only"
  (lambda (domain) (shared-preferences-read domain)))
(sandbox-array-entitlement
  "com.apple.security.exception.shared-preference.read-write"
  (lambda (domain) (shared-preferences-read-write domain)))
(protect-redirected-paths)
(protect-redirectable-paths)
