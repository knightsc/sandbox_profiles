;;;;;; Common system sandbox rules
;;;;;;
;;;;;; Copyright (c) 2008-2009 Apple Inc.  All Rights reserved.
;;;;;;
;;;;;; WARNING: The sandbox rules in this file currently constitute
;;;;;; Apple System Private Interface and are subject to change at any time and
;;;;;; without notice. The contents of this file are also auto-generated and
;;;;;; not user editable; it may be overwritten at any time.

(version 1)

;;; Allow registration of per-pid services.
(allow mach-register (local-name-prefix ""))

;;; Allow lookup of XPC services for backward-compatibility.
(allow mach-lookup (xpc-service-name-prefix ""))

;;; Allow system processes to trigger auto-mounting of filesystems.
(allow system-automount
       (process-attribute is-platform-binary))

;;; Allow mapping of system frameworks + dylibs
(allow file-map-executable
       (subpath "/Library/Apple/System/Library/Frameworks")
       (subpath "/Library/Apple/System/Library/PrivateFrameworks")
       (subpath "/System/Library/Frameworks")
       (subpath "/System/Library/PrivateFrameworks")
       (subpath "/usr/lib")
       (literal "/usr/local/lib/sanitizers"))

;;; Allow resolution of standard system symlinks.
(allow file-read-metadata
       (literal "/etc")
       (literal "/tmp")
       (literal "/var")
       (literal "/private/etc/localtime"))

;; Always allow stat'ing of path components of firmlink targets.
(allow file-read-metadata (path-ancestors "/System/Volumes/Data/private"))

;;; Allow processes to get their current working directory.
;;; Every process inherits their cwd from launchd, which uses "/".
(allow file-read* (literal "/"))

;;; Allow read access to standard system paths.
(allow file-read*
       (subpath "/Library/Apple/System")
       (subpath "/Library/Filesystems/NetFSPlugins")
       (subpath "/Library/Preferences/Logging")      ; Logging Rethink
       (subpath "/System")
       (subpath "/private/var/db/dyld")
       (subpath "/private/var/db/timezone")
       (subpath "/usr/lib")
       (subpath "/usr/share"))

;;; Allow access to standard special files.
(allow file-read*
       (literal "/dev/autofs_nowait")
       (literal "/dev/random")
       (literal "/dev/urandom")
       (literal "/private/etc/master.passwd")
       (literal "/private/etc/passwd")
       (literal "/private/etc/protocols")
       (literal "/private/etc/services"))

(allow file-read*
       file-write-data
       (literal "/dev/null")
       (literal "/dev/zero"))

(allow file-read*
       file-write-data
       file-ioctl
       (literal "/dev/dtracehelper"))

(allow file-read*
       (literal "/usr/local/lib/sanitizers"))

;;; Allow creation of core dumps.
(allow file-write-create
       (require-all (prefix "/cores/")
                    (vnode-type REGULAR-FILE)))

;;; Logging
; 1. Allow reading of internal profiles on development builds.
(allow file-read*
       (require-all (subpath "/AppleInternal/Library/Preferences/Logging")
                    (system-attribute apple-internal)))
; 2. os_log() custom formatters may be read + mapped in-process.
;    Only allow on internal builds, otherwise this would be "inject code here (TM)"
(allow file-read* file-map-executable
       (require-all (subpath "/usr/local/lib/log")
                    (system-attribute apple-internal)))

;;; Allow IPC to standard system agents.
(allow network-outbound
       (literal "/private/var/run/syslog"))

(allow ipc-posix-shm-read*
       (ipc-posix-name "apple.shm.notification_center")
       (ipc-posix-name-prefix "apple.cfprefs."))

(allow mach-lookup
       (global-name "com.apple.analyticsd")
       (global-name "com.apple.analyticsd.messagetracer")
       (global-name "com.apple.appsleep")
       (global-name "com.apple.bsd.dirhelper")
       (global-name "com.apple.cfprefsd.agent")
       (global-name "com.apple.cfprefsd.daemon")
       (global-name "com.apple.diagnosticd")
       (global-name "com.apple.espd")
       (global-name "com.apple.logd")
       (global-name "com.apple.logd.events")
       (global-name "com.apple.secinitd")
       (global-name "com.apple.system.DirectoryService.libinfo_v1")
       (global-name "com.apple.system.logger")
       (global-name "com.apple.system.notification_center")
       (global-name "com.apple.system.opendirectoryd.libinfo")
       (global-name "com.apple.system.opendirectoryd.membership")
       (global-name "com.apple.trustd")
       (global-name "com.apple.trustd.agent")
       (global-name "com.apple.xpc.activity.unmanaged")
       (local-name "com.apple.cfprefsd.agent"))

;;; Internal tool for tracing msgSend.
(with-filter (system-attribute apple-internal)
  (allow mach-lookup (global-name "com.apple.internal.objc_trace")))

;;; Allow mostly harmless operations.
(allow sysctl-read)


;;; (system-graphics) - Allow access to graphics hardware.
(define (system-graphics)
  ;; Preferences
  (allow user-preference-read
         (preference-domain "com.apple.gpu")
         (preference-domain "com.apple.opengl")
         (preference-domain "com.nvidia.OpenGL"))
  ;; OpenGL memory debugging
  (allow mach-lookup
         (global-name "com.apple.gpumemd.source"))
  ;; LaunchServices required for IOSurfaceClient eGPU selection.
  (allow mach-lookup
         (global-name "com.apple.lsd.mapdb"))
  ;; CoreAnimation & CoreDisplay
  (allow mach-lookup
         (global-name "com.apple.CARenderServer")
         (global-name "com.apple.CoreDisplay.master")
         (global-name "com.apple.CoreDisplay.Notification"))
  ;; CVMS
  (allow mach-lookup
         (global-name "com.apple.cvmsServ"))
  (allow file-read*
         (subpath "/private/var/db/CVMS"))
  ;; OpenCL
  (allow iokit-open
         (iokit-connection "IOAccelerator")
         (iokit-registry-entry-class "IOAccelerationUserClient")
         (iokit-registry-entry-class "IOSurfaceRootUserClient")
         (iokit-registry-entry-class "IOSurfaceSendRight"))
  ;; CoreVideo CVCGDisplayLink
  (allow iokit-open
         (iokit-registry-entry-class "IOFramebufferSharedUserClient"))
  ;; H.264 Acceleration
  (allow iokit-open
         (iokit-registry-entry-class "AppleIntelMEUserClient")
         (iokit-registry-entry-class "AppleSNBFBUserClient"))
  ;; QuartzCore
  (allow iokit-open
         (iokit-registry-entry-class "AGPMClient")
         (iokit-registry-entry-class "AppleGraphicsControlClient")
         (iokit-registry-entry-class "AppleGraphicsPolicyClient"))
  ;; OpenGL
  (allow iokit-open
         (iokit-registry-entry-class "AppleMGPUPowerControlClient"))
  ;; GPU bundles
  (allow file-read*
         (subpath "/Library/GPUBundles"))
  ;; DisplayServices
  (allow iokit-set-properties
         (require-all (iokit-connection "IODisplay")
                      (require-any (iokit-property "brightness")
                                   (iokit-property "linear-brightness")
                                   (iokit-property "commit")
                                   (iokit-property "rgcs")
                                   (iokit-property "ggcs")
                                   (iokit-property "bgcs")))))


;;; (system-network) - Allow access to the network.
(define (system-network)
  (allow file-read*
         (literal "/Library/Preferences/com.apple.networkd.plist")
         (literal "/private/var/db/nsurlstoraged/dafsaData.bin"))
  (allow mach-lookup
         (global-name "com.apple.SystemConfiguration.PPPController")
         (global-name "com.apple.SystemConfiguration.SCNetworkReachability")
         (global-name "com.apple.nehelper")
         (global-name "com.apple.nesessionmanager")
         (global-name "com.apple.networkd")
         (global-name "com.apple.nsurlstorage-cache")
         (global-name "com.apple.symptomsd")
         (global-name "com.apple.usymptomsd"))
  (allow network-outbound
         (control-name "com.apple.netsrc")
         (control-name "com.apple.network.statistics"))
  (allow system-socket
         (require-all (socket-domain AF_SYSTEM)
                      (socket-protocol 2)) ; SYSPROTO_CONTROL
         (socket-domain AF_ROUTE))
  ;; AppSSO support
  (allow mach-lookup
         (global-name "com.apple.AppSSO.service-xpc"))
  (allow ipc-posix-shm-read-data
         (ipc-posix-name "/com.apple.AppSSO.version")))
